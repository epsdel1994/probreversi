{"version":3,"sources":["./board.c","./game.c","gui.c"],"names":[],"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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;;AADA;AAAA;AAAA;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;;;;AAlBA;AAAA;AAAA;;AA8BA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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","file":"pbr-gui/gui.js","sourcesContent":["/*\n\tThis file is part of probreversi. See\n\t<https://github.com/epsdel1994/probreversi> for detail.\n*/\n\n#include \"board.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct _Board { bool **disk; double **prob; };\nstruct _ProbTable { double prob, **table, **sum; int *n; };\n\nint dx[] = {0, 0, -1, 1, -1, 1, -1, 1};\nint dy[] = {-1, 1, 0, 0, -1, 1, 1, -1};\n\nBoard *board_create(double prob)\n{\n\tBoard *board = malloc(sizeof(Board));\n\tboard->disk = malloc(sizeof(bool*) * 8);\n\tboard->prob = malloc(sizeof(double*) * 8);\n\tfor(int i=0; i<8; i++){\n\t\tboard->disk[i] = malloc(sizeof(bool) * 8);\n\t\tboard->prob[i] = malloc(sizeof(double) * 8);\n\t\tfor(int j=0; j<8; j++){\n\t\t\tboard->disk[i][j] = false;\n\t\t}\n\t}\n\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tboard->disk[i][j] = false;\n\t\t}\n\t}\n\n\tboard->disk[3][3] = true;\n\tboard->disk[4][3] = true;\n\tboard->disk[3][4] = true;\n\tboard->disk[4][4] = true;\n\n\tboard->prob[3][4] = prob;\n\tboard->prob[4][3] = prob;\n\tboard->prob[3][3] = 1 - prob;\n\tboard->prob[4][4] = 1 - prob;\n\n\treturn board;\n}\n\nvoid board_delete(Board *board)\n{\n\tfor(int i=0; i<8; i++){\n\t\tfree(board->disk[i]);\n\t\tfree(board->prob[i]);\n\t}\n\tfree(board->disk);\n\tfree(board->prob);\n\tfree(board);\n}\n\nProbTable *pt_create()\n{\n\tProbTable *pt = malloc(sizeof(ProbTable));\n\tpt->table = malloc(sizeof(double*) * 8);\n\tpt->sum = malloc(sizeof(double*) * 8);\n\tpt->n = malloc(sizeof(int) * 8);\n\tfor(int i=0; i<8; i++){\n\t\tpt->table[i] = malloc(sizeof(double) * 8);\n\t\tpt->sum[i] = malloc(sizeof(double) * 8);\n\t}\n\treturn pt; \n}\n\nvoid pt_delete(ProbTable *pt)\n{\n\tfor(int i=0; i<8; i++){\n\t\tfree(pt->table[i]);\n\t\tfree(pt->sum[i]);\n\t}\n\tfree(pt->table);\n\tfree(pt->sum);\n\tfree(pt->n);\n\tfree(pt);\n}\n\nProbTable *board_get_probtable(Board *board, int x, int y, int turn)\n{\n\tProbTable *pt = pt_create();\n\n\tdouble nprob = 1;\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tpt->table[i][j] = 0;\n\t\t\tpt->sum[i][j] = 0;\n\t\t}\n\n\t\tdouble pr = 1.0; int j, lx=x, ly=y;\n\t\tfor(j=0; j<7; j++){\n\t\t\tlx += dx[i]; ly += dy[i];\n\t\t\tif((lx<0) || (lx>7) || (ly<0) || (ly>7)\n\t\t\t\t|| (board->disk[lx][ly] == false)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(turn){\n\t\t\t\tpt->table[i][j] = pr * board->prob[lx][ly];\n\t\t\t\tpr *= (1-board->prob[lx][ly]);\n\t\t\t} else {\n\t\t\t\tpt->table[i][j] = pr * (1-board->prob[lx][ly]);\n\t\t\t\tpr *= board->prob[lx][ly];\n\t\t\t}\n\t\t}\n\t\tpt->n[i] = j;\n\t\tpt->table[i][j] = pr;\n\n\t\tpt->sum[i][j] = 0;\n\t\tfor(int k=j; k>0; k--){\n\t\t\tpt->sum[i][k-1]\n\t\t\t\t= pt->sum[i][k] + pt->table[i][k-1];\n\t\t}\n\t\tnprob *= (1 - pt->sum[i][1]);\n\t}\n\tpt->prob = (1 - nprob);\n\n\treturn pt;\n}\n\nBoardProb *bp_create()\n{\n\tBoardProb *bp = malloc(sizeof(ProbTable***) * 8);\n\tfor(int i=0; i<8; i++){\n\t\tbp[i] = malloc(sizeof(ProbTable**) * 8);\n\t\tfor(int j=0; j<8; j++){\n\t\t\tbp[i][j] = malloc(sizeof(ProbTable*) * 2);\n\t\t}\n\t}\n\n\treturn bp;\n}\n\nvoid bp_delete(BoardProb *bp)\n{\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tpt_delete(bp[i][j][0]);\n\t\t\tpt_delete(bp[i][j][1]);\n\t\t\tfree(bp[i][j]);\n\t\t}\n\t\tfree(bp[i]);\n\t}\n\tfree(bp);\n}\n\nBoardProb *board_get_prob(Board *board)\n{\n\tBoardProb *bp = bp_create();\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tbp[i][j][0] = board_get_probtable(board, i, j, true);\n\t\t\tbp[i][j][1] = board_get_probtable(board, i, j, false);\n\t\t}\n\t}\n\treturn bp;\n}\n\nvoid board_get_movable(Board *board, BoardProb *bp, double prob, bool **res)\n{\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tres[i][j] = (prob * bp[i][j][0]->prob\n\t\t\t\t+ (1-prob) * bp[i][j][1]->prob > 0.5)\n\t\t\t\t&& (board->disk[i][j] == false);\n\t\t}\n\t}\n}\n\nBoard *board_move(Board *board, int x, int y, double prob, BoardProb *bp)\n{\n\tdouble move_prob = prob * bp[x][y][0]->prob\n\t\t+ (1-prob) * bp[x][y][1]->prob;\n\tif((move_prob <= 0.5) || (board->disk[x][y] == true)){\n\t\treturn NULL;\n\t}\n\n\tBoard *r = board_create(0);\n\tBoard *a1 = board_create(0);\n\tBoard *a2 = board_create(0);\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tr->disk[i][j] = board->disk[i][j];\n\t\t\ta1->disk[i][j] = board->disk[i][j];\n\t\t\ta1->prob[i][j] = board->prob[i][j];\n\t\t\ta2->disk[i][j] = board->disk[i][j];\n\t\t\ta2->prob[i][j] = board->prob[i][j];\n\t\t}\n\t}\n\n\tr->disk[x][y] = true;\n\ta1->disk[x][y] = true;\n\ta2->disk[x][y] = true;\n\ta1->prob[x][y] = 1.0;\n\ta2->prob[x][y] = 0.0;\n\n\tfor(int i=0; i<8; i++){\n\t\tdouble C1, C2;\n\t\tif(bp[x][y][0]->n[i]>1){\n\t\t\tdouble P1 = bp[x][y][0]->sum[i][1] / bp[x][y][0]->prob;\n\t\t\tdouble P2 = 1 - P1;\n\t\t\tC1 = P1 / bp[x][y][0]->sum[i][1];\n\t\t\tC2 = P2 / (1 - bp[x][y][0]->sum[i][1]);\n\t\t} else {\n\t\t\tcontinue;\n\t\t}\n\n\t\tint lx=x, ly=y;\n\n\t\tlx += dx[i]; ly += dy[i];\n\t\ta1->prob[lx][ly]\n\t\t\t= C2 * 1 * bp[x][y][0]->table[i][0]\n\t\t\t+ C1 * 1 * bp[x][y][0]->sum[i][1];\n\n\t\tfor(int j=1; j<bp[x][y][0]->n[i]; j++){\n\t\t\tlx += dx[i]; ly += dy[i];\n\t\t\ta1->prob[lx][ly]\n\t\t\t\t= C2 * a1->prob[lx][ly]\n\t\t\t\t\t* bp[x][y][0]->table[i][0]\n\t\t\t\t+ C1 * 1 * bp[x][y][0]->sum[i][j]\n\t\t\t\t+ C1 * a1->prob[lx][ly]\n\t\t\t\t\t* (bp[x][y][0]->sum[i][1]\n\t\t\t\t\t\t- bp[x][y][0]->sum[i][j]);\n\t\t}\n\t}\n\n\tfor(int i=0; i<8; i++){\n\t\tdouble C1, C2;\n\t\tif(bp[x][y][1]->n[i]>1){\n\t\t\tdouble P1 = bp[x][y][1]->sum[i][1] / bp[x][y][1]->prob;\n\t\t\tdouble P2 = 1 - P1;\n\t\t\tC1 = P1 / bp[x][y][1]->sum[i][1];\n\t\t\tC2 = P2 / (1 - bp[x][y][1]->sum[i][1]);\n\t\t} else {\n\t\t\tcontinue;\n\t\t}\n\n\t\tint lx=x, ly=y;\n\n\t\tlx += dx[i]; ly += dy[i];\n\t\ta2->prob[lx][ly]\n\t\t\t= C2 * 0 * bp[x][y][1]->table[i][0]\n\t\t\t+ C1 * 0 * bp[x][y][1]->sum[i][1]\n\t\t\t+ C2 * 1 * bp[x][y][1]->table[i][\n\t\t\t\tbp[x][y][1]->n[i]];\n\n\t\tfor(int j=1; j<bp[x][y][1]->n[i]; j++){\n\t\t\tlx += dx[i]; ly += dy[i];\n\t\t\ta2->prob[lx][ly]\n\t\t\t\t= C2 * a2->prob[lx][ly]\n\t\t\t\t\t* bp[x][y][1]->table[i][0]\n\t\t\t\t+ C1 * 0 * bp[x][y][1]->sum[i][j]\n\t\t\t\t+ C1 * a2->prob[lx][ly]\n\t\t\t\t\t* (bp[x][y][1]->sum[i][1]\n\t\t\t\t\t\t- bp[x][y][1]->sum[i][j])\n\t\t\t\t+ C2 * 1 * bp[x][y][1]->table[i][\n\t\t\t\t\tbp[x][y][1]->n[i]];\n\t\t}\n\t}\n\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tr->prob[i][j] = prob * a1->prob[i][j]\n\t\t\t\t+ (1 - prob) * a2->prob[i][j];\n\t\t}\n\t}\n\n\tboard_delete(a1);\n\tboard_delete(a2);\n\n\treturn r;\n}\n\nvoid board_get(Board *board, bool **movable, char *str)\n{\n\tint pos = 0;\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tif(board->disk[i][j] == false){\n\t\t\t\tif((movable != NULL)\n\t\t\t\t\t&& (movable[i][j] == true)){\n\t\t\t\t\tsprintf(str+pos, \"[]\");\n\t\t\t\t} else {\n\t\t\t\t\tsprintf(str+pos, \"--\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint res = board->prob[i][j] * 100 + 0.5;\n\t\t\t\tif(res>99){ res = 99; }\n\t\t\t\tif(res<0){ res = 0; }\n\t\t\t\tsprintf(str+pos, \"%02d\", res);\n\t\t\t}\n\t\t\tpos += 2;\n\t\t}\n\t}\n}\n\nvoid board_print(Board *board, bool **movable)\n{\n\tprintf(\"\\n  *A |B |C |D |E |F |G |H *\\n\");\n\tfor(int i=0; i<8; i++){\n\t\tprintf(\" %d|\", i+1);\n\t\tfor(int j=0; j<8; j++){\n\t\t\tif(board->disk[i][j] == false){\n\t\t\t\tif((movable != NULL)\n\t\t\t\t\t&& (movable[i][j] == true)){\n\t\t\t\t\tprintf(\"[]|\");\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"--|\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint res = board->prob[i][j] * 100 + 0.5;\n\t\t\t\tif(res>99){ res = 99; }\n\t\t\t\tif(res<0){ res = 0; }\n\t\t\t\tprintf(\"%02d|\", res);\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\n","/*\n\tThis file is part of probreversi. See\n\t<https://github.com/epsdel1994/probreversi> for detail.\n*/\n\n#include \"game.h\"\n\n#include <stdlib.h>\n\nstruct _Game {\n\tBoard *cur, *hist[60][60];\n\tbool **movable, turn, isover, turnhist[60][60];\n\tBoardProb *bp;\n\tint hist_num, hist_cur[60], hist_max[60];\n\tdouble prob;\n};\n\nGame *game_create(double prob)\n{\n\tGame *game = malloc(sizeof(Game));\n\tgame->movable = malloc(sizeof(bool*) * 8);\n\tfor(int i=0; i<8; i++){\n\t\tgame->movable[i] = malloc(sizeof(bool) * 8);\n\t}\n\tgame_set_prob(game, prob);\n\tgame->bp = NULL;\n\tgame->cur = NULL;\n\tgame_new(game);\n\treturn game;\n}\n\nvoid game_delete(Game *game)\n{\n\tgame_free_boards(game);\n\tfree(game);\n}\n\ndouble game_get_prob_next(Game *game)\n{\n\tif(game->isover == false){\n\t\treturn (game->turn ? game->prob : (1 - game->prob));\n\t} else {\n\t\treturn -1;\n\t}\n}\n\ndouble game_get_prob(Game *game)\n{\n\treturn game->prob;\n}\n\nvoid game_set_prob(Game *game, double prob)\n{\n\tgame->prob = prob;\n}\n\nvoid game_update_probtable(Game *game)\n{\n\tif(game->bp){ bp_delete(game->bp); };\n\tgame->bp = board_get_prob(game->cur);\n\tboard_get_movable(game->cur, game->bp,\n\t\t( game->turn ? game->prob : (1 - game->prob)), game->movable);\n\n\tgame->isover = false;\n\tif(game_can_move(game) == false){\n\t\tgame->turn = !(game->turn);\n\t\tif(game->bp){ bp_delete(game->bp); };\n\t\tgame->bp = board_get_prob(game->cur);\n\t\tboard_get_movable(game->cur, game->bp,\n\t\t\t( game->turn ? game->prob : (1 - game->prob)),\n\t\t\tgame->movable);\n\t\tif(game_can_move(game) == false){\n\t\t\tgame->turn = !(game->turn);\n\t\t\tgame->isover = true;\n\t\t}\n\t}\n}\n\nvoid game_update_history(Game *game)\n{\n\tfor(int i=game->hist_cur[game->hist_num]+1;\n\t\ti<=game->hist_max[game->hist_num]; i++){\n\t\tboard_delete(game->hist[game->hist_num][i]);\n\t}\n\n\tgame->hist_cur[game->hist_num] += 1;\n\tgame->hist_max[game->hist_num] = game->hist_cur[game->hist_num];\n\tgame->hist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]] = game->cur;\n\tgame->turnhist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]] = game->turn;\n}\n\nvoid game_free_boards(Game *game)\n{\n\tfor(int i=0; i<game->hist_num; i++){\n\t\tfor(int j=0; j<game->hist_max[i]; j++){\n\t\t\tboard_delete(game->hist[i][j]);\n\t\t}\n\t}\n}\n\nvoid game_new(Game *game)\n{\n\tgame->hist_num = 0;\n\tgame->hist_cur[0] = -1;\n\tgame->hist_max[0] = -1;\n\tif(game->cur){ board_delete(game->cur); }\n\tgame->cur = board_create(game->prob);\n\tgame->turn = true;\n\tgame_update_history(game);\n\tgame_update_probtable(game);\n}\n\nvoid game_reset(Game *game)\n{\n\tgame_free_boards(game);\n\tgame_new(game);\n}\n\nbool game_can_move(Game *game)\n{\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tif(game->movable[i][j] == true){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nbool game_move(Game *game, int x, int y)\n{\n\tif((x<0) || (x>7) || (y<0) || (y>7)){ return false; }\n\tif(game->movable[x][y] == false){ return false; }\n\tgame->cur = board_move(game->cur, x, y,\n\t\t(game->turn ? game->prob : (1 - game->prob)), game->bp);\n\tgame->turn = !(game->turn);\n\n\tgame_update_probtable(game);\n/*\n\tif(game_can_move(game) == false){\n\t\tgame->turn = !(game->turn);\n\t\tgame_update_probtable(game);\n\t\tif(game_can_move(game) == false){\n\t\t\tgame->turn = !(game->turn);\n\t\t}\n\t}\n*/\n\tgame_update_history(game);\n\treturn true;\n}\n\nbool game_can_undo(Game *game)\n{\n\treturn game->hist_cur[game->hist_num] != 0;\n}\n\nbool game_undo(Game *game)\n{\n\tif(game->hist_cur[game->hist_num] == 0){ return false; }\n\tgame->hist_cur[game->hist_num] -= 1;\n\tgame->cur = game->hist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]];\n\tgame->turn = game->turnhist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]];\n\tgame_update_probtable(game);\n\treturn true;\n}\n\nbool game_can_redo(Game *game)\n{\n\treturn game->hist_cur[game->hist_num]\n\t\t!= game->hist_max[game->hist_num];\n}\n\nbool game_redo(Game *game)\n{\n\tif(game->hist_cur[game->hist_num]\n\t\t== game->hist_max[game->hist_num]){ return false; }\n\tgame->hist_cur[game->hist_num] += 1;\n\tgame->cur = game->hist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]];\n\tgame->turn = game->turnhist[game->hist_num]\n\t\t[game->hist_cur[game->hist_num]];\n\tgame_update_probtable(game);\n\treturn true;\n}\n\nbool game_can_branch(Game *game)\n{\n\treturn false;\n}\n\nbool game_branch(Game *game)\n{\n\treturn false;\n}\n\nbool game_can_trunk(Game *game)\n{\n\treturn false;\n}\n\nbool game_trunk(Game *game)\n{\n\treturn false;\n}\n\nvoid game_str(Game *game, char *str)\n{\n\tboard_get(game->cur, game->movable, str);\n\tif(game->isover == false){\n\t\tstr[128] = 'p';\n\t\tsprintf(str+129, \"%02d\", (int)((game->turn ? game->prob :\n\t\t\t(1 - game->prob)) * 100 + 0.5));\n\t} else {\n\t\tsprintf(str+129, \"o\");\n\t}\n}\n\nvoid game_print(Game *game, char *str)\n{\n\tboard_print(game->cur, game->movable);\n\tif(game->isover == false){\n\t\tprintf(\"Black probability of next disk is [%02d]\\n\",\n\t\t\t(int)((game->turn ? game->prob :\n\t\t\t\t(1 - game->prob)) * 100 + 0.5));\n\t} else {\n\t\tprintf(\"Game Over\\n\");\n\t}\n}\n\nint game_count(Game *game)\n{\n\tint black=0, white=0;\n\tfor(int i=0; i<8; i++){\n\t\tfor(int j=0; j<8; j++){\n\t\t\tif(game->cur->disk[i][j] == true){\n\t\t\t\tif(game->cur->prob[i][j]>0.5){\n\t\t\t\t\tblack++;\n\t\t\t\t} else if(game->cur->prob[i][j]<0.5){\n\t\t\t\t\twhite++;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n\tif(black > white){\n\t\treturn 64 - white;\n\t} else if(black < white){\n\t\treturn black;\n\t} else {\n\t\treturn 32;\n\t}\n}\n\n","#include <emscripten.h>\n\n#include \"board.c\"\n#include \"game.c\"\n\nGame *game;\n\nint EMSCRIPTEN_KEEPALIVE ems_setup(double prob)\n{\n\tgame = game_create(prob);\n\tif(game == NULL){\n\t\treturn 0;\n\t} else {\n\t\treturn 1;\n\t}\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_move(int x, int y)\n{\n\treturn (game_move(game, y, x) ? 1 : 0);\n}\n\nvoid EMSCRIPTEN_KEEPALIVE ems_get_str(char *str)\n{\n\tgame_str(game, str);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_can_undo()\n{\n\treturn (game_can_undo(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_can_redo()\n{\n\treturn (game_can_redo(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_can_branch()\n{\n\treturn (game_can_branch(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_can_trunk()\n{\n\treturn (game_can_trunk(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_undo()\n{\n\treturn (game_undo(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_redo()\n{\n\treturn (game_redo(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_branch()\n{\n\treturn (game_branch(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_trunk()\n{\n\treturn (game_trunk(game) ? 1 : 0);\n}\n\nint EMSCRIPTEN_KEEPALIVE ems_count()\n{\n\treturn game_count(game);\n}\n\ndouble EMSCRIPTEN_KEEPALIVE ems_get_prob_base()\n{\n\treturn game_get_prob(game);\n}\n\ndouble EMSCRIPTEN_KEEPALIVE ems_get_prob_next()\n{\n\treturn game_get_prob_next(game);\n}\n\nvoid EMSCRIPTEN_KEEPALIVE ems_set_prob_base(double prob)\n{\n\tgame_set_prob(game, prob);\n\tgame_update_probtable(game);\n}\n\nvoid EMSCRIPTEN_KEEPALIVE ems_new()\n{\n\tgame_new(game);\n}\n\n"]}